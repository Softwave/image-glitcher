{"version":3,"sources":["App.js","Canvas.js","reportWebVitals.js","index.js"],"names":["App","className","Canvas","props","canvasRef","useRef","useState","glitchAmount","setGlitch","inputFileRef","React","createRef","type","ref","onChange","e","canvas","current","context","getContext","reader","FileReader","onload","event","img","Image","width","height","drawImage","src","target","result","readAsDataURL","files","min","max","value","defaultValue","id","onClick","click","name","imageData","getImageData","params","amount","quality","iterations","parseInt","seed","console","log","glitch","fromImageData","toDataURL","then","dataURL","glitchedImg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAUeA,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,oBAAIA,UAAU,YAAd,+B,4CC2FSC,EAzFA,SAAAC,GAEX,IAAMC,EAAYC,iBAAO,MAFL,EAKYC,mBAAS,GALrB,mBAKfC,EALe,KAKDC,EALC,KASdC,EAAeC,IAAMC,YA6D3B,OACI,gCACI,uBAAOC,KAAK,OAAOC,IAAKJ,EAAcK,SA7DrB,SAACC,GACtB,IAAMC,EAASZ,EAAUa,QACnBC,EAAUF,EAAOG,WAAW,MAG9BC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACrB,IAAIC,EAAM,IAAIC,MACdD,EAAIF,OAAS,WACTN,EAAOU,MAAQF,EAAIE,MACnBV,EAAOW,OAASH,EAAIG,OACpBT,EAAQU,UAAUJ,EAAI,EAAE,IAE5BA,EAAIK,IAAMN,EAAMO,OAAOC,QAEvBX,EAAOY,cAAcjB,EAAEe,OAAOG,MAAM,OA+CpC,oBAAIhC,UAAU,eAAd,oBACA,qBAAKA,UAAU,wBAAf,SACI,uBAAOW,KAAK,QAAQsB,IAAI,IAAIC,IAAI,KAAKrB,SA7CtB,SAACC,GAExBP,EAAUO,EAAEe,OAAOM,QA2CwDC,aAAa,IAAIpC,UAAU,gBAAgBqC,GAAG,cAErH,qBAAKrC,UAAU,mBAAf,SACI,oCAAQA,UAAU,gBAAgBY,IAAKT,GAAeD,MAE1D,sBAAKF,UAAU,eAAf,UACI,wBAAQsC,QA1CF,WACd9B,EAAaQ,QAAQuB,SAyCevC,UAAU,2BAA2BwC,KAAK,aAAtE,wBACA,wBAAQF,QAvCA,WAChB,IAAMvB,EAASZ,EAAUa,QACnBC,EAAUF,EAAOG,WAAW,MAG9BuB,EAAYxB,EAAQyB,aAAa,EAAG,EAAG3B,EAAOU,MAAOV,EAAOW,QAC5DiB,EAAS,CACTC,OAAQ,EACRC,QAAS,GACTC,WAAYC,SAASzC,GACrB0C,KAAM,IAEVC,QAAQC,IAAIP,GACZQ,IAAOR,GACFS,cAAcX,GACdY,YACAC,MAAK,SAASC,GACX,IAAIC,EAAc,IAAIhC,MACtBgC,EAAY5B,IAAM2B,EAElBC,EAAYnC,OAAS,WACjBJ,EAAQU,UAAU6B,EAAa,EAAG,EAAGzC,EAAOU,MAAOV,EAAOW,aAkBhC1B,UAAU,uBAAuBwC,KAAK,SAApE,oBACA,uBAAK,uBAAK,8BC9EXiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBL,MAAK,YAAkD,IAA/CM,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.44461dc8.chunk.js","sourcesContent":["import './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"App-title\">Image Glitcher</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import './Canvas.css';\r\nimport './Button.css';\r\nimport glitch from 'glitch-canvas';\r\n\r\n\r\nimport React, { useRef, useState } from 'react'\r\n\r\nconst Canvas = props => {\r\n    // Canvas stuff \r\n    const canvasRef = useRef(null)\r\n\r\n    //\r\n    var [glitchAmount, setGlitch] = useState(0)\r\n\r\n\r\n    // File stuff \r\n    const inputFileRef = React.createRef()\r\n\r\n    const handleFileChange = (e) => {\r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext('2d')\r\n\r\n\r\n        var reader = new FileReader();\r\n        reader.onload = function(event){\r\n            var img = new Image();\r\n            img.onload = function() {\r\n                canvas.width = img.width;\r\n                canvas.height = img.height;\r\n                context.drawImage(img,0,0);\r\n            }\r\n            img.src = event.target.result;\r\n        }\r\n            reader.readAsDataURL(e.target.files[0]);  \r\n    }\r\n\r\n\r\n    const handleChangeAmount = (e) => {\r\n        //console.log(e.target.value)\r\n        setGlitch(e.target.value)\r\n        //console.log(glitchAmount)\r\n        //clickGlitch()\r\n        //setState({glitchAmount: e.target.value})\r\n        //glitchAmount = e.target.value\r\n    }\r\n\r\n    const clickLoad = () => {\r\n        inputFileRef.current.click()\r\n    }\r\n\r\n    const clickGlitch = () => {\r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext('2d')\r\n        \r\n        \r\n        var imageData = context.getImageData(0, 0, canvas.width, canvas.height)\r\n        var params = { \r\n            amount: 5,\r\n            quality: 64,\r\n            iterations: parseInt(glitchAmount),\r\n            seed: 25\r\n        }\r\n        console.log(params)\r\n        glitch(params)\r\n            .fromImageData(imageData)\r\n            .toDataURL()\r\n            .then(function(dataURL) { \r\n                var glitchedImg = new Image()   \r\n                glitchedImg.src = dataURL \r\n\r\n                glitchedImg.onload = function() {\r\n                    context.drawImage(glitchedImg, 0, 0, canvas.width, canvas.height)\r\n                }\r\n                                \r\n            });\r\n    }\r\n  \r\n    return (\r\n        <div>\r\n            <input type=\"file\" ref={inputFileRef} onChange={handleFileChange}></input>\r\n            <h2 className=\"Canvas-label\">Amount</h2>\r\n            <div className=\"Canvas-slidecontainer\">\r\n                <input type=\"range\" min=\"1\" max=\"99\" onChange={handleChangeAmount} defaultValue=\"0\" className=\"Canvas-slider\" id=\"myRange\"></input>\r\n            </div>\r\n            <div className=\"Canvas-container\">\r\n                <canvas className=\"Canvas-canvas\" ref={canvasRef} {...props}/>\r\n            </div>\r\n            <div className=\"btnContainer\">\r\n                <button onClick={clickLoad} className='Button-button Load Image' name=\"Load Image\">Load Image</button>\r\n                <button onClick={clickGlitch} className='Button-button Glitch' name=\"Glitch\">Glitch</button>\r\n                <br/><br/><br/>\r\n            </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Canvas\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Canvas from './Canvas';\r\n//import Button from './Button';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    <Canvas />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}