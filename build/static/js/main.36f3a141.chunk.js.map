{"version":3,"sources":["App.js","Canvas.js","reportWebVitals.js","index.js"],"names":["App","className","Canvas","props","canvasRef","useRef","inputFileRef","useState","React","createRef","name","cName","String","type","ref","onChange","e","canvas","current","context","getContext","reader","FileReader","onload","event","img","Image","width","height","drawImage","src","target","result","readAsDataURL","files","min","max","defaultValue","id","href","onClick","click","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAUeA,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,oBAAIA,UAAU,YAAd,+B,OCyHSC,G,YAxHA,SAAAC,GAEX,IAAMC,EAAYC,iBAAO,MAKnBC,GAJOC,mBAAS,kCAIDC,IAAMC,aAKnBC,EAASP,EAATO,KAEFC,EAAQ,iBAAmBC,OADhBF,GAwFjB,OACI,gCACI,uBAAOG,KAAK,OAAOC,IAAKR,EAAcS,SAvFrB,SAACC,GACtB,IAAMC,EAASb,EAAUc,QACnBC,EAAUF,EAAOG,WAAW,MAG9BC,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASC,GACrB,IAAIC,EAAM,IAAIC,MACdD,EAAIF,OAAS,WACTN,EAAOU,MAAQF,EAAIE,MACnBV,EAAOW,OAASH,EAAIG,OACpBT,EAAQU,UAAUJ,EAAI,EAAE,IAE5BA,EAAIK,IAAMN,EAAMO,OAAOC,OACdR,EAAMO,OAAOC,QAEtBX,EAAOY,cAAcjB,EAAEe,OAAOG,MAAM,OAwEpC,wCACA,qBAAKjC,UAAU,wBAAf,SACI,uBAAOY,KAAK,QAAQsB,IAAI,IAAIC,IAAI,MAAMC,aAAa,IAAIpC,UAAU,gBAAgBqC,GAAG,cAExF,qBAAKrC,UAAU,mBAAf,SACI,oCAAQA,UAAU,gBAAgBa,IAAKV,GAAeD,MAE1D,sBAAKF,UAAU,eAAf,UACI,mBAAGsC,KAAK,IAAIC,QA1EN,WACdlC,EAAaY,QAAQuB,SAyEmBxC,UAAU,2BAA2BS,KAAK,aAA1E,wBACA,mBAAG6B,KAAK,IAAIC,QAvER,WAEC,4BAAT7B,GACA+B,MAAM,6BAED,mEAkE6BzC,UAAU,uBAAuBS,KAAK,SAApE,oBACA,uBAAK,uBAAK,+BC5GXiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.36f3a141.chunk.js","sourcesContent":["import './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-title\">Image Glitcher</h1>\n    </div>\n  );\n}\n\nexport default App;\n","import './Canvas.css';\r\nimport './Button.css';\r\n\r\n\r\nimport React, { useRef, useEffect, useState } from 'react'\r\n\r\nconst Canvas = props => {\r\n    // Canvas stuff \r\n    const canvasRef = useRef(null)\r\n    var imgSrc = useState('http://i.imgur.com/ctg8RaK.png')\r\n\r\n\r\n    // File stuff \r\n    const inputFileRef = React.createRef()\r\n    //const onFileChange = handleFileChange.bind()\r\n\r\n\r\n    // Button stuff \r\n    const { name } = props \r\n    const btnLabel = name\r\n    const cName = \"Button-button \" + String(btnLabel)\r\n\r\n    const handleFileChange = (e) => {\r\n        const canvas = canvasRef.current\r\n        const context = canvas.getContext('2d')\r\n\r\n\r\n        var reader = new FileReader();\r\n        reader.onload = function(event){\r\n            var img = new Image();\r\n            img.onload = function() {\r\n                canvas.width = img.width;\r\n                canvas.height = img.height;\r\n                context.drawImage(img,0,0);\r\n            }\r\n            img.src = event.target.result;\r\n            imgSrc = event.target.result;\r\n        }\r\n            reader.readAsDataURL(e.target.files[0]);  \r\n        \r\n\r\n        //redraw(context)\r\n    }\r\n\r\n    const clickLoad = () => {\r\n        inputFileRef.current.click()\r\n    }\r\n\r\n    const clicked = () => {\r\n        //alert(cName)\r\n        if (cName == \"Button-button Load Image\") {\r\n            alert(\"Hello! It was load image!\")\r\n        }\r\n        imgSrc = 'https://upload.wikimedia.org/wikipedia/commons/3/35/Toast-3.jpg'\r\n        \r\n        //const canvas = canvasRef.current\r\n        //const context = canvas.getContext('2d')\r\n        \r\n\r\n        //draw(context)\r\n    }\r\n    \r\n    const redraw = ctx => {\r\n        var canvas = ctx.canvas\r\n        var img = new Image()\r\n        var canvWidth = 600\r\n        img.onload = function() {\r\n            if(img.width>img.height){\r\n                canvas.width = canvWidth\r\n                canvas.height = canvWidth / img.width * img.height\r\n            } else {\r\n                canvas.width = canvWidth / img.height * img.width\r\n                canvas.height = canvWidth\r\n            }   \r\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n        }\r\n        img.src = imgSrc\r\n    }\r\n    \r\n    const draw = ctx => {\r\n        var canvas = ctx.canvas\r\n        ctx.fillStyle = '#000000'\r\n        ctx.beginPath()\r\n        ctx.arc(50, 100, 20, 0, 2*Math.PI)\r\n        ctx.fill()\r\n        var img = new Image()\r\n        var canvWidth = 600\r\n        img.onload = function() {\r\n            if(img.width>img.height){\r\n                canvas.width = canvWidth\r\n                canvas.height = canvWidth / img.width * img.height\r\n            } else {\r\n                canvas.width = canvWidth / img.height * img.width\r\n                canvas.height = canvWidth\r\n            }   \r\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n        }\r\n        img.src = imgSrc \r\n    }\r\n  \r\n    //useEffect(() => {\r\n    //    const canvas = canvasRef.current\r\n    //    const context = canvas.getContext('2d')\r\n//\r\n    //    draw(context)\r\n    //}, [draw])\r\n  \r\n    return (\r\n        <div>\r\n            <input type=\"file\" ref={inputFileRef} onChange={handleFileChange}></input>\r\n            <h2>Amount</h2>\r\n            <div className=\"Canvas-slidecontainer\">\r\n                <input type=\"range\" min=\"1\" max=\"100\" defaultValue=\"0\" className=\"Canvas-slider\" id=\"myRange\"></input>\r\n            </div>\r\n            <div className=\"Canvas-container\">\r\n                <canvas className=\"Canvas-canvas\" ref={canvasRef} {...props}/>\r\n            </div>\r\n            <div className=\"btnContainer\">\r\n                <a href=\"#\" onClick={clickLoad} className='Button-button Load Image' name=\"Load Image\">Load Image</a>\r\n                <a href=\"#\" onClick={clicked} className='Button-button Glitch' name=\"Glitch\">Glitch</a>\r\n                <br/><br/><br/>\r\n            </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Canvas\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Canvas from './Canvas';\n//import Button from './Button';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <Canvas />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}